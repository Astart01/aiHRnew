import streamlit as st
import pandas as pd
import numpy as np
import os
import re
import string
import joblib
import fitz  # PyMuPDF
import base64
import pymorphy3
import nltk
from nltk.corpus import stopwords
from nltk.stem.snowball import SnowballStemmer
from catboost import CatBoostClassifier
import hashlib
import json
import io
import subprocess
import sys
import io
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import pdf2image

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —ç—Ç–æ –î–û–õ–ñ–ù–ê –±—ã—Ç—å –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ Streamlit
st.set_page_config(
    page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤",
    page_icon="üìÑ",
    layout="wide"
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ URL
query_params = st.query_params
if "clear" in query_params:
    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    if hasattr(st, "session_state"):
        for key in list(st.session_state.keys()):
            if key not in ['authenticated', 'user_role', 'user_name']:
                del st.session_state[key]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    st.session_state.processed_files = {}
    st.session_state.results = []
    st.session_state.has_processed_files = False
    st.session_state.selected_rows = set()
    
    # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏ –∏–∑ URL
    st.query_params.clear()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
USERS_FILE = "users.json"

# --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding='utf-8') as f:
            return json.load(f)
    else:
        default_users = {
            "admin": {
                "password": hashlib.sha256("admin".encode()).hexdigest(),
                "role": "admin",
                "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            },
            "user": {
                "password": hashlib.sha256("password".encode()).hexdigest(),
                "role": "user",
                "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
        }
        with open(USERS_FILE, "w", encoding='utf-8') as f:
            json.dump(default_users, f, ensure_ascii=False, indent=4)
        return default_users

def save_users(users):
    with open(USERS_FILE, "w", encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

def authenticate(username, password):
    users = load_users()
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    if username in users and users[username]["password"] == hashed_password:
        st.session_state.user_role = users[username]["role"]
        st.session_state.user_name = users[username].get("name", username)
        return True
    return False

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_panel():
    st.title("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    tab1, tab2 = st.tabs(["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
    
    with tab1:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        users = load_users()
        
        user_list = []
        for username, user_data in users.items():
            user_list.append({
                "–õ–æ–≥–∏–Ω": username,
                "–ò–º—è": user_data.get("name", ""),
                "–†–æ–ª—å": user_data.get("role", "user")
            })
        
        user_df = pd.DataFrame(user_list)
        st.dataframe(user_df, use_container_width=True)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.subheader("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        user_to_delete = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                                     [u for u in users.keys() if u != "admin"])
        
        if st.button("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            if user_to_delete == "admin":
                st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            else:
                users.pop(user_to_delete, None)
                save_users(users)
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                st.rerun()
    
    with tab2:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        with st.form("add_user_form"):
            new_username = st.text_input("–õ–æ–≥–∏–Ω")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            new_name = st.text_input("–ò–º—è")
            new_role = st.selectbox("–†–æ–ª—å", ["user", "admin"])
            
            submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if submit:
                users = load_users()
                if new_username in users:
                    st.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º {new_username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                elif not new_username or not new_password:
                    st.error("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
                else:
                    users[new_username] = {
                        "password": hashlib.sha256(new_password.encode()).hexdigest(),
                        "role": new_role,
                        "name": new_name
                    }
                    save_users(users)
                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'user_role' not in st.session_state:
    st.session_state.user_role = None
if 'user_name' not in st.session_state:
    st.session_state.user_name = None
if 'processed_files' not in st.session_state:
    st.session_state.processed_files = {}
if 'results' not in st.session_state:
    st.session_state.results = []
if 'has_processed_files' not in st.session_state:
    st.session_state.has_processed_files = False
if 'selected_rows' not in st.session_state:
    st.session_state.selected_rows = set()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ NLTK –¥–∞–Ω–Ω—ã—Ö ---
nltk.download('stopwords')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ —Å—Ç–µ–º–º–µ—Ä–∞ ---
morph = pymorphy3.MorphAnalyzer()
stemmer = SnowballStemmer("russian")
default_stopwords = set(stopwords.words("russian"))
custom_stopwords = default_stopwords - {"–±–µ–∑", "–¥–ª—è", "–ø–æ", "–ø—Ä–∏", "–Ω–∞–¥"}
custom_stopwords |= {
    "—Ä–µ–∑—é–º–µ", "–æ–±–Ω–æ–≤–ª–µ–Ω–æ", "–∫–æ–Ω—Ç–∞–∫—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–º–µ—Å—è—Ü", "–ª–µ—Ç",
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è", "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "—Ä–∞–±–æ—Ç–∞",
    "–∫–æ–º–ø–∞–Ω–∏—è", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–æ—Å–Ω–æ–≤–Ω–æ–π", "–∑–∞–¥–∞—á–∞", "–æ–ø—ã—Ç", "–º–µ—Å—Ç–æ",
    "–≥–æ–¥–∞", "–≥–æ–¥—É", "–≤–ª–∞–¥–µ–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"
}

# --- –†—É—á–Ω—ã–µ —Ñ–∏—á–∏ ---
features = {
    "sales_experience": [
        r"–æ–ø—ã—Ç.*–ø—Ä–æ–¥–∞", r"–∑–≤–æ–Ω–∫[–∞-—è]*", r"\bCRM\b", r"SPIN", r"AIDA", r"—Å–∫—Ä–∏–ø—Ç",
        r"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫", r"–≤–æ—Ä–æ–Ω–∫", r"—Ç–µ–ª–µ–º–∞—Ä–∫–µ—Ç", r"–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂"
    ],
    "hard_skills": [
        r"–≤–æ–∑—Ä–∞–∂–µ–Ω", r"–ø–µ—Ä–µ–≥–æ–≤–æ—Ä", r"—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü", r"–º–Ω–æ–≥–æ–∑–∞–¥–∞",
        r"–≤–µ–¥–µ–Ω–∏–µ.*–ø–µ—Ä–µ–≥–æ–≤–æ—Ä", r"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â", r"1—Å", r"excel", r"–∞–Ω–∞–ª–∏–∑"
    ],
    "soft_skills": [
        r"–º–æ—Ç–∏–≤–∏—Ä", r"—Å–∞–º–æ—Å—Ç–æ—è—Ç", r"–ø—Ä–æ–∞–∫—Ç–∏–≤", r"–æ–±—É—á–∞[–µ–∏—è]", r"–¥—Ä—É–∂–µ–ª—é–±", r"—Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤",
        r"–∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç", r"–≥–∏–±–∫–æ—Å—Ç", r"–∞–¥–∞–ø—Ç–∏—Ä", r"—ç–Ω–µ—Ä–≥–∏—á–Ω", r"–Ω–∞—Å—Ç–æ–π—á–∏–≤", r"–∫–æ–º–º—É–Ω–∏–∫–∞–±"
    ],
    "performance_metrics": [
        r"–∫–æ–Ω–≤–µ—Ä—Å", r"–≤—ã—Ä—É—á–∫", r"—á–µ–∫", r"–ø–ª–∞–Ω", r"—Ä–µ–∑—É–ª—å—Ç–∞—Ç", r"—Ä–æ—Å—Ç.*–∫–æ–Ω–≤–µ—Ä—Å",
        r"–ª–æ—è–ª—å–Ω", r"–≤–æ–∑–≤—Ä–∞—Ç", r"kpi", r"–¥–æ—Å—Ç–∏–∂", r"—É–¥–≤–æ–∏–ª", r"–≤—ã–ø–æ–ª–Ω", r"–∑–∞–∫—Ä—ã—Ç"
    ]
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ comments.py) ---
def detect_red_flag_areas(text):
    text = text.lower()
    
    # –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –æ–ø—ã—Ç–∞
    red_flag_areas = {
        "—Ñ–∏—Ç–Ω–µ—Å": ["—Ñ–∏—Ç–Ω–µ—Å", "—Ç—Ä–µ–Ω–µ—Ä", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±", "—Ñ–∏—Ç–Ω–µ—Å —Ü–µ–Ω—Ç—Ä", "—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª"],
        "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": ["–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "—Ä–∏—ç–ª—Ç–æ—Ä", "–∞–≥–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–ø—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä", "–ø—Ä–æ–¥–∞–∂–∞ –¥–æ–º–æ–≤"],
        "–∞–≤—Ç–æ": ["–∞–≤—Ç–æ—Å–∞–ª–æ–Ω", "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–º–∞—à–∏–Ω—ã", "–ø—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ", "–∞–≤—Ç–æ–¥–∏–ª–µ—Ä", "–ø—Ä–æ–¥–∞–≤–µ—Ü –∞–≤—Ç–æ"],
        "–±–∞–Ω–∫–∏": ["–±–∞–Ω–∫", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–∏–ø–æ—Ç–µ—á–Ω—ã–π", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
        "—Å–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã": ["—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "—Å—Ç–∏–ª–∏—Å—Ç", "–≤–∏–∑–∞–∂–∏—Å—Ç", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥"],
        "–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç": ["–ø—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", "–ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", "—Ä–∞–±–æ—Ç–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ"]
    }
    
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏)
    positive_indicators = [
        "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", "—Ö–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏", "—Ç–µ–ª–µ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "call-—Ü–µ–Ω—Ç—Ä", "–∫–æ–ª–ª —Ü–µ–Ω—Ç—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–æ–±–∑–≤–æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "—Ö–æ–ª–æ–¥–Ω–∞—è –±–∞–∑–∞", "–ª–∏–¥—ã", "—É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", "–æ–ø–µ—Ä–∞—Ç–æ—Ä call-—Ü–µ–Ω—Ç—Ä–∞"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å red flag –æ–±–ª–∞—Å—Ç—è–º–∏
    found_red_flags = []
    for area, keywords in red_flag_areas.items():
        for keyword in keywords:
            if keyword in text:
                found_red_flags.append(area)
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    has_phone_sales = False
    for indicator in positive_indicators:
        if indicator in text:
            has_phone_sales = True
            break
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å red flags, –Ω–æ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
    if found_red_flags and not has_phone_sales:
        return True, found_red_flags, has_phone_sales
    
    return False, found_red_flags, has_phone_sales

def get_detailed_comment(text, predicted_class, relevance_prob):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º red flags
    is_red_flag, red_flag_areas, has_phone_sales = detect_red_flag_areas(text)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    comment = ""
    
    if is_red_flag:
        red_flag_str = ", ".join(set(red_flag_areas))
        comment += f"RED FLAG: –ò–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç—è—Ö: {red_flag_str}, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂."
    elif red_flag_areas and has_phone_sales:
        red_flag_str = ", ".join(set(red_flag_areas))
        comment += f"–ò–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç—è—Ö: {red_flag_str}, –Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º."
    elif has_phone_sales:
        comment += "–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç –æ–ø—ã—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–∏."
    elif predicted_class == 0:
        comment += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂
    sales_skills = []
    
    skill_patterns = {
        "CRM": ["crm", "—Å—Ä–º", "customer relationship management"],
        "–•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏": ["—Ö–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏", "—Ö–æ–ª–æ–¥–Ω—ã–π –æ–±–∑–≤–æ–Ω", "—Ö–æ–ª–æ–¥–Ω–∞—è –±–∞–∑–∞"],
        "–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏": ["–≤–æ–∑—Ä–∞–∂–µ–Ω", "—Ä–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏", "–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π"],
        "–í–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤": ["–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤", "–Ω–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤"],
        "SPIN/AIDA": ["spin", "aida", "—Ç–µ—Ö–Ω–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", "–º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–∞–∂"],
        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞": ["–ø–ª–∞–Ω –ø—Ä–æ–¥–∞–∂", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞", "–ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞", "–ø–ª–∞–Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"],
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂": ["–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂", "–ø—Ä–æ–¥–∞–∂–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è"]
    }
    
    for skill, patterns in skill_patterns.items():
        for pattern in patterns:
            if pattern in text.lower():
                sales_skills.append(skill)
                break
    
    if sales_skills:
        skills_str = ", ".join(sales_skills)
        comment += f" –û–±–ª–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏: {skills_str}."
    else:
        comment += " –í —Ä–µ–∑—é–º–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂."
    
    return comment, is_red_flag

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ---
@st.cache_resource
def load_model():
    model_path = "catboost_model.cbm"
    if not os.path.exists(model_path):
        st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ {model_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None, None, None
    try:
        model = CatBoostClassifier()
        model.load_model(model_path)
        try:
            scaler = joblib.load("scaler.pkl")
        except:
            scaler = joblib.load("scaler.joblib")
        try:
            tfidf = joblib.load("tfidf_vectorizer.pkl")
        except:
            tfidf = joblib.load("tfidf_vectorizer.joblib")
        st.success("–ú–æ–¥–µ–ª—å –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return model, scaler, tfidf
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        st.code(traceback.format_exc())
        return None, None, None
    
# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
def extract_text_from_pdf(pdf_file):
    try:
        doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
        text = ""
        for page in doc:
            text += page.get_text()
        doc.close()
        return text
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞] {e}"

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π display_pdf
def convert_pdf_to_images(pdf_file):
    try:
        pdf_file.seek(0)
        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º DPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        # –ß–µ–º –º–µ–Ω—å—à–µ DPI, —Ç–µ–º –º–µ–Ω—å—à–µ –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç
        images = pdf2image.convert_from_bytes(
            pdf_file.read(),
            dpi=72,  # –£–º–µ–Ω—å—à–∞–µ–º DPI –¥–æ 72 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞)
            fmt='jpeg',
            size=(800, None)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 800 –ø–∏–∫—Å–µ–ª—è–º–∏
        )
        return images
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def display_pdf(pdf_file):
    images = convert_pdf_to_images(pdf_file)
    if images:
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF
        if len(images) > 1:
            tabs = st.tabs([f"–°—Ç—Ä. {i+1}" for i in range(len(images))])
            for i, tab in enumerate(tabs):
                with tab:
                    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞
                    img_resized = images[i].resize((800, int(800 * images[i].height / images[i].width)))
                    st.image(img_resized, use_container_width=True)
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            img_resized = images[0].resize((800, int(800 * images[0].height / images[0].width)))
            st.image(img_resized, use_container_width=True)
    else:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            pdf_file.seek(0)
            base64_pdf = base64.b64encode(pdf_file.read()).decode("utf-8")
            pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="100%" height="600px" type="application/pdf"></iframe>'
            st.markdown(pdf_display, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å PDF: {e}")

def extract_resume_info(text):
    info = {
        "phone": "-",
        "position": "-",
        "city": "-",
        "age": "-",
        "gender": "-",
        "salary": "-"
    }
    phone_match = re.search(r'\+7\s*\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', text)
    if phone_match:
        info["phone"] = phone_match.group()
    position_match = re.search(r"[–∂–ñ]–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞\s*[:‚Äî]?\s*\s*(.*?)(?=\n|$)", text, re.IGNORECASE | re.DOTALL)
    if position_match:
        info["position"] = position_match.group(1).strip()
    city_match = re.search(r'(–ú–æ—Å–∫–≤–∞|–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥|–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|–ö–∞–∑–∞–Ω—å|–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|–°–∞–º–∞—Ä–∞|–û–º—Å–∫|–ß–µ–ª—è–±–∏–Ω—Å–∫)', text)
    if city_match:
        info["city"] = city_match.group(1)
    age_match = re.search(r',\s(\d{2})\s*(–≥–æ–¥|–ª–µ—Ç|–≥–æ–¥–∞),', text)
    if age_match:
        info["age"] = age_match.group(1)
    if '–∂–µ–Ω—â–∏–Ω–∞,' in text.lower()[:500]:
        info["gender"] = "–ñ–µ–Ω—â–∏–Ω–∞"
    elif '–º—É–∂—á–∏–Ω–∞,' in text.lower()[:500]:
        info["gender"] = "–ú—É–∂—á–∏–Ω–∞"
    salary_match = re.search(r'\d{2,3}\s*(000|—Ç.—Ä.)\s*(‚ÇΩ|—Ä|—Ä—É–±)', text)
    if salary_match:
        info["salary"] = re.sub(r'\D', '', salary_match.group(0))
    return info

def preprocess_resume(text):
    cover_idx = text.lower().find("—Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ")
    position_idx = text.lower().find("–∂–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞")
    if cover_idx != -1:
        text = text[cover_idx:]
    elif position_idx != -1:
        text = text[position_idx:]
    text = re.sub(r'–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ', '[COVER]', text, flags=re.IGNORECASE)
    text = re.sub(r'–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞', '[POSITION]', text, flags=re.IGNORECASE)
    text = re.sub(r'–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', '[SPECIALIZATIONS]', text, flags=re.IGNORECASE)
    text = re.sub(r'–ó–∞–Ω—è—Ç–æ—Å—Ç—å:.*?–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ‚Äî', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ‚Äî', text, flags=re.DOTALL)
    text = text.split('–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º')[0]
    text = re.sub(r'\S+@\S+', ' ', text)
    text = re.sub(r'\+7\s*\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', ' ', text)
    text = re.sub(r'http\S+|www\.\S+|\S+\.ru|\S+\.com', ' ', text)
    months = r'(—è–Ω–≤–∞—Ä[—å—è]|—Ñ–µ–≤—Ä–∞–ª[—å—è]|–º–∞—Ä—Ç–∞?|–∞–ø—Ä–µ–ª[—å—è]|–º–∞[–π—è]|–∏—é–Ω[—å—è]|–∏—é–ª[—å—è]|–∞–≤–≥—É—Å—Ç[–∞]?|—Å–µ–Ω—Ç—è–±—Ä[—å—è]|–æ–∫—Ç—è–±—Ä[—å—è]|–Ω–æ—è–±—Ä[—å—è]|–¥–µ–∫–∞–±—Ä[—å—è])'
    text = re.sub(rf'{months}\s+\d{{4}}\s*[‚Äî-]\s*{months}\s+\d{{4}}', ' ', text, flags=re.IGNORECASE)
    text = re.sub(rf'{months}\s+\d{{4}}', ' ', text, flags=re.IGNORECASE)
    text = re.sub(r'\b\d{1,2}[./]\d{1,2}[./]\d{2,4}\b', ' ', text)
    text = re.sub(r'\b\d{4}\b', ' ', text)
    text = re.sub(r'\b\d+\b', ' ', text)
    text = re.sub(r'<.*?>', ' ', text)
    text = text.translate(str.maketrans('', '', string.punctuation + '‚Ä¢‚Äì‚Äî'))
    replacements = {
        r'–ù–∞–≤—ã–∫–∏': '[SKILLS]',
        r'–û–±–æ –º–Ω–µ': '[ABOUT]',
        r'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': '[EXPERIENCE]',
        r'–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': '[EDUCATION]',
        r'–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤': '[LANGUAGES]',
        r'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': '[EXTRA]',
    }
    for pattern, tag in replacements.items():
        text = re.sub(pattern, tag, text, flags=re.IGNORECASE)
    text = text.lower()
    words = re.findall(r'\b\w+\b', text)
    processed_words = []
    for word in words:
        if word not in custom_stopwords:
            lemma = morph.parse(word)[0].normal_form
            stem = stemmer.stem(lemma)
            processed_words.append(stem)
    if len(processed_words) > 2:
        processed_words = processed_words[:-2]
    return ' '.join(processed_words)

def extract_features(text, feature_dict):
    text = text.lower()
    return {
        category: sum(int(re.search(pattern, text) is not None) for pattern in patterns)
        for category, patterns in feature_dict.items()
    }

def extract_resume_features(text):
    clean_text = text.replace('\n', ' ').replace('\r', ' ').lower()
    try:
        features = {
            'gender': 1 if '–∂–µ–Ω—â–∏–Ω–∞,' in clean_text[:500] else (-1 if '–º—É–∂—á–∏–Ω–∞,' in clean_text[:500] else 0),
            'age': int(re.search(r',\s(\d{2})\s*(–≥–æ–¥|–ª–µ—Ç|–≥–æ–¥–∞),', clean_text).group(1)) if re.search(r',\s(\d{2})\s*(–≥–æ–¥|–ª–µ—Ç|–≥–æ–¥–∞),', clean_text) else -1,
            'salary': int(re.sub(r'\D', '', re.search(r'\d{2,3}\s*(000|—Ç.—Ä.)\s*(‚ÇΩ|—Ä|—Ä—É–±)', clean_text)[0])) if re.search(r'\d{2,3}\s*(000|—Ç.—Ä.)\s*(‚ÇΩ|—Ä|—Ä—É–±)', clean_text) else -1,
            'student': int('—Å—Ç—É–¥–µ–Ω—Ç' in clean_text or '—É—á—É—Å—å' in clean_text or '–æ—á–Ω–∞—è' in clean_text),
            'wants_sales_position': int('–ø—Ä–æ–¥–∞–∂' in clean_text),
            'text_length': len(clean_text),
            'num_digits': sum(c.isdigit() for c in clean_text),
        }
        return features
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ä–µ–∑—é–º–µ: {e}")
        return {
            'gender': 0,
            'age': -1,
            'salary': -1,
            'student': 0,
            'wants_sales_position': 0,
            'text_length': len(clean_text),
            'num_digits': sum(c.isdigit() for c in clean_text),
        }

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AmoCRM ---
def send_to_amocrm():
    if not st.session_state.results or len(st.session_state.results) == 0:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AmoCRM. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª—ã.")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_df = pd.DataFrame(st.session_state.results)
    result_df["–§–∞–π–ª"] = result_df["–§–∞–π–ª"].str.replace('.pdf', '', regex=False)
    result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"] = result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].astype(float).map("{:.2f}".format)
    result_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"] = result_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"].apply(lambda x: f"{int(x):,}".replace(',', ' ') if str(x).isdigit() else x)
    
    display_df = result_df.drop(columns=["raw_proba", "raw_text", "prediction_class"], errors="ignore")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ CSV
    temp_csv_path = "temp_results.csv"
    display_df.to_csv(temp_csv_path, index=False, encoding='utf-8')
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ amo_script.py
        from amo_script import AmoCRMClient
        
        with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM..."):
            client = AmoCRMClient(temp_csv_path)
            client.process_csv()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
        if os.path.exists(temp_csv_path):
            os.remove(temp_csv_path)
        
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM: {e}")
        import traceback
        st.code(traceback.format_exc())
        return False

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def login_page():
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    with st.form("login_form"):
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        if submitted:
            if authenticate(username, password):
                st.session_state.authenticated = True
                st.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")


def main_app():
    model, scaler, tfidf = load_model()
    st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
    st.markdown("### –§–æ–∫—É—Å: –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if 'selected_rows' not in st.session_state:
        st.session_state.selected_rows = set()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ PDF (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞)
    if hasattr(st.session_state, 'reset_pdf') and st.session_state.reset_pdf:
        if hasattr(st.session_state, 'selected_pdf'):
            del st.session_state.selected_pdf
        st.session_state.reset_pdf = False
    
    THRESHOLD = 0.19
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª—ã", type="pdf", accept_multiple_files=True)
    
    if uploaded_files and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã"):
        results = []
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
            for file in uploaded_files:
                file.seek(0)
                raw_text = extract_text_from_pdf(file)
                if "[–û—à–∏–±–∫–∞]" in raw_text:
                    results.append({
                        "–§–∞–π–ª": file.name,
                        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1": 0,
                        "–¢–µ–ª–µ—Ñ–æ–Ω": "-",
                        "–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å": "-",
                        "–ì–æ—Ä–æ–¥": "-",
                        "–í–æ–∑—Ä–∞—Å—Ç": "-",
                        "–ü–æ–ª": "-",
                        "–ó–∞—Ä–ø–ª–∞—Ç–∞": "-",
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {raw_text}"
                    })
                    continue
                st.session_state.processed_files[file.name] = {
                    "file": file,
                    "raw_text": raw_text
                }
                info = extract_resume_info(raw_text)
                processed_text = preprocess_resume(raw_text)
                keyword_features = extract_features(processed_text, features)
                resume_features = extract_resume_features(raw_text)
                manual_df = pd.DataFrame([keyword_features | resume_features])
                tfidf_features = tfidf.transform([processed_text]).toarray()
                combined_features = np.hstack([manual_df.values, tfidf_features])
                scaled_features = scaler.transform(combined_features)
                proba = model.predict_proba(scaled_features)[0]
                raw_proba = proba[1]
                prediction = 1 if raw_proba >= THRESHOLD else 0
                comment, is_red_flag = get_detailed_comment(raw_text, prediction, raw_proba)
                
                results.append({
                    "–§–∞–π–ª": file.name,
                    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1": raw_proba,
                    "–¢–µ–ª–µ—Ñ–æ–Ω": info["phone"],
                    "–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å": info["position"],
                    "–ì–æ—Ä–æ–¥": info["city"],
                    "–í–æ–∑—Ä–∞—Å—Ç": info["age"],
                    "–ü–æ–ª": info["gender"],
                    "–ó–∞—Ä–ø–ª–∞—Ç–∞": info["salary"],
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
                    "raw_proba": raw_proba,
                    "raw_text": raw_text
                })
        st.session_state.results = results
        st.session_state.has_processed_files = True
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.session_state.has_processed_files and st.session_state.results:
        for r in st.session_state.results:
            r["prediction_class"] = 1 if r["raw_proba"] >= THRESHOLD else 0
            if "raw_text" in r:
                r["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"], is_red_flag = get_detailed_comment(r["raw_text"], r["prediction_class"], r["raw_proba"])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_df = pd.DataFrame(st.session_state.results)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ raw_proba –∏–º–µ–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
        result_df["raw_proba"] = pd.to_numeric(result_df["raw_proba"], errors='coerce')
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π
        result_df = result_df.sort_values(by="raw_proba", ascending=False).reset_index(drop=True)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        result_df["–§–∞–π–ª"] = result_df["–§–∞–π–ª"].str.replace('.pdf', '', regex=False)
        result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"] = result_df["raw_proba"].astype(float).map("{:.2f}".format)
        result_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"] = result_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"].apply(lambda x: f"{int(x):,}".replace(',', ' ') if str(x).isdigit() else x)
    
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ—Ö"
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.checkbox("–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ—Ö", key="select_all"):
                st.session_state.selected_rows = set(range(len(result_df)))
            else:
                if len(st.session_state.selected_rows) == len(result_df):  # –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã, —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
                    st.session_state.selected_rows = set()
    
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–≤–µ—Ç–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        with col2:
            if st.checkbox("–ó–µ–ª–µ–Ω—ã–µ (‚â•81%)", key="green_filter"):
                green_indices = set(result_df[result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].astype(float) >= 0.81].index)
                st.session_state.selected_rows = st.session_state.selected_rows.union(green_indices)
    
        with col3:
            if st.checkbox("–ñ–µ–ª—Ç—ã–µ (19-80%)", key="yellow_filter"):
                yellow_indices = set(result_df[
                    (result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].astype(float) >= 0.19) & 
                    (result_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].astype(float) < 0.81)
                ].index)
                st.session_state.selected_rows = st.session_state.selected_rows.union(yellow_indices)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ PDF
        cols = st.columns([0.1, 1.5, 0.8, 0.8, 1.5, 0.8, 0.8, 0.8, 2, 0.3])
        cols[0].write("") # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        cols[1].write("–§–ò–û")
        cols[2].write("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
        cols[3].write("–í–æ–∑—Ä–∞—Å—Ç")
        cols[4].write("–¢–µ–ª–µ—Ñ–æ–Ω")
        cols[5].write("–ì–æ—Ä–æ–¥")
        cols[6].write("–ü–æ–ª")
        cols[7].write("–ó–∞—Ä–ø–ª–∞—Ç–∞")
        cols[8].write("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        cols[9].write("") # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ PDF
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
        display_df = result_df.drop(columns=["raw_proba", "raw_text", "prediction_class"], errors="ignore")
        
        for idx, row in display_df.iterrows():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            try:
                prob = float(row["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].replace(',', '.'))
            except:
                prob = 0
            
            if prob >= 0.81:
                bg_color = "#ccffcc"  # –∑–µ–ª–µ–Ω—ã–π
            elif prob < 0.19:
                bg_color = "#ffcccc"  # –∫—Ä–∞—Å–Ω—ã–π
            else:
                bg_color = "#fff6cc"  # –∂–µ–ª—Ç—ã–π
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
            row_cols = st.columns([0.1, 1.5, 0.8, 0.8, 1.5, 0.8, 0.8, 0.8, 2, 0.3])
            
            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞
            is_selected = idx in st.session_state.selected_rows
            if row_cols[0].checkbox("", key=f"select_{idx}", value=is_selected):
                st.session_state.selected_rows.add(idx)
            else:
                if idx in st.session_state.selected_rows:
                    st.session_state.selected_rows.remove(idx)
            
            # –î–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            name = row["–§–∞–π–ª"].replace(".pdf", "")
            row_cols[1].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{name}</div>', unsafe_allow_html=True)
            row_cols[2].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"]}</div>', unsafe_allow_html=True)
            row_cols[3].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–í–æ–∑—Ä–∞—Å—Ç"]}</div>', unsafe_allow_html=True)
            row_cols[4].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–¢–µ–ª–µ—Ñ–æ–Ω"]}</div>', unsafe_allow_html=True)
            row_cols[5].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–ì–æ—Ä–æ–¥"]}</div>', unsafe_allow_html=True)
            row_cols[6].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–ü–æ–ª"]}</div>', unsafe_allow_html=True)
            row_cols[7].markdown(f'<div style="background-color:{bg_color}; padding:5px;">{row["–ó–∞—Ä–ø–ª–∞—Ç–∞"]}</div>', unsafe_allow_html=True)
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            comment = row["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
            row_cols[8].markdown(f'<div style="background-color:{bg_color}; padding:5px; overflow-wrap: break-word;">{comment}</div>', unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∞ PDF
            row_cols[9].markdown(f"""
            <style>
                div[data-testid="stButton"] > button {{
                    background-color: transparent;
                    color: #FF0000;
                    font-size: 12px;
                    padding: 1px 6px;
                    border: 1px solid #FF0000;
                    border-radius: 4px;
                    width: 80%;
                    height: auto;
                    margin: 0 auto;
                    display: block;
                }}
            </style>
            """, unsafe_allow_html=True)
            if row_cols[9].button("PDF", key=f"pdf_{idx}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—é–º–µ"):
                # –ù–∞–π–¥–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ processed_files
                file_name = row["–§–∞–π–ª"] + ".pdf" if not row["–§–∞–π–ª"].endswith(".pdf") else row["–§–∞–π–ª"]
                if file_name in st.session_state.processed_files:
                    file_data = st.session_state.processed_files[file_name]["file"]
                    st.session_state.selected_pdf = {"file": file_data, "name": file_name}
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF
        
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è Excel —Ñ–∞–π–ª–∞
        buffer = io.BytesIO()

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = list(display_df.columns)
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="E0E0E0", end_color="E0E0E0", fill_type="solid")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
            ws.column_dimensions[get_column_letter(col_num)].width = 15

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_idx, row in enumerate(display_df.values, 2):
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            try:
                prob = float(row[list(display_df.columns).index("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1")].replace(',', '.'))
            except:
                prob = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            if prob >= 0.81:
                fill_color = "CCFFCC"  # –∑–µ–ª–µ–Ω—ã–π
            elif prob < 0.19:
                fill_color = "FFCCCC"  # –∫—Ä–∞—Å–Ω—ã–π
            else:
                fill_color = "FFF6CC"  # –∂–µ–ª—Ç—ã–π
                
            fill = PatternFill(start_color=fill_color, end_color=fill_color, fill_type="solid")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
            for col_idx, value in enumerate(row, 1):
                cell = ws.cell(row=row_idx, column=col_idx)
                cell.value = value
                cell.fill = fill
                
                # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
                if col_idx == list(display_df.columns).index("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π") + 1:
                    cell.alignment = Alignment(wrap_text=True, vertical='top')
                    ws.row_dimensions[row_idx].height = 60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        wb.save(buffer)
        buffer.seek(0)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
            data=buffer,
            file_name="predictions.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        st.markdown("""
        <style>
            div[data-testid="stButton"] > button {
                border-color: #9e9e9e;
                color: #505050;
            }
            div[data-testid="stButton"] > button:hover {
                border-color: #6e6e6e;
                color: #303030;
            }
        </style>
        """, unsafe_allow_html=True)


        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ", key="clear_all_button"):
            # JavaScript –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á–∏—Å—Ç–∫–∏
            js = """
            <script>
                var url = window.parent.location.origin + window.parent.location.pathname;
                window.parent.location.href = url + "?clear=true&t=" + new Date().getTime();
            </script>
            """
            st.markdown(js, unsafe_allow_html=True)
            
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            st.session_state.processed_files = {}
            st.session_state.results = []
            st.session_state.has_processed_files = False
            st.session_state.selected_rows = set()
                
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
            st.success("–í—Å–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            st.rerun()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ rerun() –≤–º–µ—Å—Ç–æ experimental_rerun()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        if st.session_state.selected_rows:
            selected_count = len(st.session_state.selected_rows)
            st.write(f"–í—ã–±—Ä–∞–Ω–æ: {selected_count} —Ä–µ–∑—é–º–µ")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –≤ AmoCRM
            if st.button(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –≤ AmoCRM ({selected_count})"):
                selected_results = [st.session_state.results[idx] for idx in st.session_state.selected_rows]
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DataFrame —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—é–º–µ
                temp_df = pd.DataFrame(selected_results)
                temp_df["–§–∞–π–ª"] = temp_df["–§–∞–π–ª"].str.replace('.pdf', '', regex=False)
                temp_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"] = temp_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1"].astype(float).map("{:.2f}".format)
                temp_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"] = temp_df["–ó–∞—Ä–ø–ª–∞—Ç–∞"].apply(lambda x: f"{int(x):,}".replace(',', ' ') if str(x).isdigit() else x)
                
                display_temp_df = temp_df.drop(columns=["raw_proba", "raw_text", "prediction_class"], errors="ignore")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ CSV
                temp_csv_path = "temp_selected_results.csv"
                display_temp_df.to_csv(temp_csv_path, index=False, encoding='utf-8')
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ amo_script.py
                    from amo_script import AmoCRMClient
                    
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM..."):
                        client = AmoCRMClient(temp_csv_path)
                        client.process_csv()
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
                    if os.path.exists(temp_csv_path):
                        os.remove(temp_csv_path)
                    
                    st.success(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ ({selected_count}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ AmoCRM!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM: {e}")
        else:
            # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ AmoCRM"):
                success = send_to_amocrm()
                if success:
                    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ AmoCRM!")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω PDF –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    if hasattr(st.session_state, 'selected_pdf') and st.session_state.selected_pdf:
        st.divider()
        st.subheader(f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä: {st.session_state.selected_pdf['name']}")
        display_pdf(st.session_state.selected_pdf['file'])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        file_name = st.session_state.selected_pdf['name']
        raw_text = st.session_state.processed_files[file_name]["raw_text"]
        info = extract_resume_info(raw_text)
        info_df = pd.DataFrame({
            "–ü–æ–ª–µ": ["–¢–µ–ª–µ—Ñ–æ–Ω", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª", "–ó–∞—Ä–ø–ª–∞—Ç–∞"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                info["phone"], 
                info["position"], 
                info["city"], 
                info["age"], 
                info["gender"],
                info["salary"]
            ]
        })
        st.table(info_df)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä PDF
        if st.button("–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä PDF"):
            del st.session_state.selected_pdf
            st.rerun()
    else:
        if uploaded_files:
            st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ.")
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª—ã —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    
    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ —Å –ø–æ—á—Ç—ã ---
    if st.session_state.user_role == "admin":
        st.divider()
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ —Å –ø–æ—á—Ç—ã")
        if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å –ø–æ—á—Ç—ã"):
            try:
                from pochtalion import download_pdfs
                downloaded_files = download_pdfs()
                if downloaded_files:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                    results = []
                    for file_path in downloaded_files:
                        with open(file_path, "rb") as f:
                            file = io.BytesIO(f.read())
                            file.name = os.path.basename(file_path)
                            raw_text = extract_text_from_pdf(file)
                            info = extract_resume_info(raw_text)
                            processed_text = preprocess_resume(raw_text)
                            keyword_features = extract_features(processed_text, features)
                            resume_features = extract_resume_features(raw_text)
                            manual_df = pd.DataFrame([keyword_features | resume_features])
                            tfidf_features = tfidf.transform([processed_text]).toarray()
                            combined_features = np.hstack([manual_df.values, tfidf_features])
                            scaled_features = scaler.transform(combined_features)
                            proba = model.predict_proba(scaled_features)[0]
                            raw_proba = proba[1]
                            prediction = 1 if raw_proba >= THRESHOLD else 0
                            
                            comment, is_red_flag = get_detailed_comment(raw_text, prediction, raw_proba)
                            
                            results.append({
                                "–§–∞–π–ª": file.name,
                                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1": raw_proba,
                                "–¢–µ–ª–µ—Ñ–æ–Ω": info["phone"],
                                "–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å": info["position"],
                                "–ì–æ—Ä–æ–¥": info["city"],
                                "–í–æ–∑—Ä–∞—Å—Ç": info["age"],
                                "–ü–æ–ª": info["gender"],
                                "–ó–∞—Ä–ø–ª–∞—Ç–∞": info["salary"],
                                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
                                "raw_proba": raw_proba,
                                "raw_text": raw_text
                            })
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ processed_files –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
                            st.session_state.processed_files[file.name] = {
                                "file": file,
                                "raw_text": raw_text
                            }
                            
                    st.session_state.results.extend(results)
                    st.session_state.has_processed_files = True
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(downloaded_files)} –Ω–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ")
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                else:
                    st.info("–ù–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ —Å –ø–æ—á—Ç—ã: {e}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª pochtalion.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é download_pdfs")


# --- –ì–ª–∞–≤–Ω–∞—è ---
def main():
    if st.session_state.authenticated:
        st.sidebar.write(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{st.session_state.user_name}** ({st.session_state.user_role})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ —Å–∞–π–¥–±–∞—Ä
        menu_options = ["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—é–º–µ"]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if st.session_state.user_role == "admin":
            menu_options.append("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        selected_menu = st.sidebar.radio("–ú–µ–Ω—é", menu_options)
        
        if st.sidebar.button("–í—ã–π—Ç–∏"):
            # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å–µ—Å—Å–∏–∏
            if 'processed_files' in st.session_state:
                del st.session_state['processed_files']
            if 'results' in st.session_state:
                del st.session_state['results']
            if 'has_processed_files' in st.session_state:
                del st.session_state['has_processed_files']
            if 'selected_rows' in st.session_state:
                del st.session_state['selected_rows']
            if 'selected_pdf' in st.session_state:
                del st.session_state['selected_pdf']
            
            # –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            st.session_state.authenticated = False
            st.session_state.user_role = None
            st.session_state.user_name = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            st.session_state.processed_files = {}
            st.session_state.results = []
            st.session_state.has_processed_files = False
            st.session_state.selected_rows = set()
            
            st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        if selected_menu == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—é–º–µ":
            main_app()
        elif selected_menu == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and st.session_state.user_role == "admin":
            admin_panel()
    else:
        login_page()

if __name__ == "__main__":
    main()